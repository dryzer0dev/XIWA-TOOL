"""
Copyright (c) 2025 Dryz3R - XiwA Tool
All rights reserved.

ENGLISH:
This software is the property of Dryz3R and is protected by copyright laws.
Unauthorized copying, distribution, or modification of this software is strictly prohibited.
XiwA Tool is a comprehensive security and analysis suite developed by Dryz3R.

FRANÇAIS:
Ce logiciel est la propriété de Dryz3R et est protégé par les lois sur le droit d'auteur.
La copie, la distribution ou la modification non autorisée de ce logiciel est strictement interdite.
XiwA Tool est une suite complète de sécurité et d'analyse développée par Dryz3R.

ESPAÑOL:
Este software es propiedad de Dryz3R y está protegido por las leyes de derechos de autor.
Se prohíbe estrictamente la copia, distribución o modificación no autorizada de este software.
XiwA Tool es una suite completa de seguridad y análisis desarrollada por Dryz3R.
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import socket
import threading
import subprocess
from colorama import Fore, Style, init

# Initialisation de colorama
init()

class ExploitFramework:
    def __init__(self):
        self.banner = f"""
{Fore.RED}
███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
█████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   
██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   
███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   
╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   
{Style.RESET_ALL}
        """
        self.options = {
            '1': 'Scanner de ports',
            '2': 'Scanner de vulnérabilités',
            '3': 'Exploit personnalisé',
            '4': 'Quitter'
        }

    def afficher_menu(self):
        print(self.banner)
        for key, value in self.options.items():
            print(f"{Fore.CYAN}[{key}] {value}{Style.RESET_ALL}")

    def scanner_ports(self, host):
        print(f"\n{Fore.YELLOW}[*] Scan des ports en cours pour {host}...{Style.RESET_ALL}")
        try:
            for port in range(1, 1025):
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                if result == 0:
                    print(f"{Fore.GREEN}[+] Port {port} ouvert{Style.RESET_ALL}")
                sock.close()
        except:
            print(f"{Fore.RED}[-] Erreur lors du scan{Style.RESET_ALL}")

    def scanner_vulnerabilites(self, host):
        print(f"\n{Fore.YELLOW}[*] Scan des vulnérabilités en cours...{Style.RESET_ALL}")
        try:
            # Exemple simple de vérification de services courants
            services = {
                80: 'HTTP',
                443: 'HTTPS',
                21: 'FTP',
                22: 'SSH',
                3306: 'MySQL'
            }
            
            for port, service in services.items():
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                if result == 0:
                    print(f"{Fore.GREEN}[+] Service {service} détecté sur le port {port}{Style.RESET_ALL}")
                sock.close()
        except:
            print(f"{Fore.RED}[-] Erreur lors du scan des vulnérabilités{Style.RESET_ALL}")

    def exploit_personnalise(self):
        print(f"\n{Fore.YELLOW}[*] Mode exploit personnalisé{Style.RESET_ALL}")
        print("1. Créer un payload")
        print("2. Lancer un exploit existant")
        choix = input("\nChoix: ")
        
        if choix == "1":
            print(f"{Fore.YELLOW}[*] Création de payload{Style.RESET_ALL}")
            type_payload = input("Type de payload (reverse_tcp/bind_tcp): ")
            ip = input("IP cible: ")
            port = input("Port: ")
            
            print(f"\n{Fore.GREEN}[+] Génération du payload...{Style.RESET_ALL}")
            print(f"Type: {type_payload}")
            print(f"IP: {ip}")
            print(f"Port: {port}")
            
        elif choix == "2":
            print(f"{Fore.YELLOW}[*] Exploits disponibles:{Style.RESET_ALL}")
            exploits = {
                "1": "EternalBlue (MS17-010)",
                "2": "BlueKeep (CVE-2019-0708)", 
                "3": "WebLogic (CVE-2019-2725)",
                "4": "Drupal (CVE-2018-7600)",
                "5": "Apache Struts (CVE-2017-5638)",
                "6": "Samba (CVE-2017-7494)",
                "7": "ProFTPD (CVE-2015-3306)",
                "8": "Heartbleed (CVE-2014-0160)"
            }
            
            for num, nom in exploits.items():
                print(f"{num}. {nom}")
                
            exploit_choix = input("\nChoisir un exploit: ")
            if exploit_choix in exploits:
                print(f"\n{Fore.GREEN}[+] Lancement de l'exploit {exploits[exploit_choix]}{Style.RESET_ALL}")
                print(f"{Fore.YELLOW}[*] Configuration de l'exploit...{Style.RESET_ALL}")
                ip_cible = input("IP cible: ")
                port_cible = input("Port cible: ")
                
                try:
                    # Création du socket
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(5)
                    
                    # Tentative de connexion
                    print(f"\n{Fore.GREEN}[+] Tentative d'exploitation de {ip_cible}:{port_cible}{Style.RESET_ALL}")
                    sock.connect((ip_cible, int(port_cible)))
                    
                    # Envoi du payload malveillant selon l'exploit choisi
                    print(f"{Fore.YELLOW}[*] Envoi du payload...{Style.RESET_ALL}")
                    if exploit_choix == "1":  # EternalBlue
                        payload = b"\x00\x00\x00\x54\xff\x53\x4d\x42\x72\x00\x00\x00\x00\x18\x53\xc8"
                    elif exploit_choix == "2":  # BlueKeep
                        payload = b"\x03\x00\x00\x13\x0e\xe0\x00\x00\x00\x00\x00\x01\x00\x08\x00\x00\x00\x00\x00"
                    else:
                        payload = b"A" * 1024  # Payload générique pour test
                        
                    sock.send(payload)
                    
                    # Attente de la réponse
                    response = sock.recv(1024)
                    if response:
                        print(f"{Fore.GREEN}[+] Exploit réussi! Réponse reçue{Style.RESET_ALL}")
                    
                except Exception as e:
                    print(f"{Fore.RED}[-] Erreur lors de l'exploitation: {str(e)}{Style.RESET_ALL}")
                finally:
                    sock.close()
                    
                print(f"{Fore.GREEN}[+] Exploit terminé!{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}[-] Exploit invalide{Style.RESET_ALL}")

    def run(self):
        while True:
            self.afficher_menu()
            choix = input("\nChoisissez une option: ")
            
            if choix == '1':
                host = input("Entrez l'adresse IP cible: ")
                self.scanner_ports(host)
            elif choix == '2':
                host = input("Entrez l'adresse IP cible: ")
                self.scanner_vulnerabilites(host)
            elif choix == '3':
                self.exploit_personnalise()
            elif choix == '4':
                print(f"\n{Fore.GREEN}Au revoir!{Style.RESET_ALL}")
                break
            else:
                print(f"\n{Fore.RED}Option invalide!{Style.RESET_ALL}")

if __name__ == "__main__":
    framework = ExploitFramework()
    framework.run()
